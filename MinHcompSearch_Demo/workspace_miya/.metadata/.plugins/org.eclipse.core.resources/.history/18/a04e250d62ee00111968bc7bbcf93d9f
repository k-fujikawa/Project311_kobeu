package main;

import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import org.apache.commons.lang.StringUtils;

import search.RunQuery;
import search.TemporalProfile;

import com.google.gson.Gson;

public class TwitterSetsServer implements Runnable {
	Socket s;
	int id;
	String hostname = "rubicon.cs.scitec.kobe-u.ac.jp";
	int port = 5600;

	public TwitterSetsServer(Socket s, int id) {
		this.s = s;
		this.id = id;
	}

	public TwitterSetsServer(String hostname, int port, Socket s, int id) {
		this.hostname = hostname;
		this.port = port;
		this.s = s;
		this.id = id;
	}

	/**
	 * @param args
	 */
	public static void main(String[] args) {
		int port = 9998, count = 0;
		try {
			// create new socket
			ServerSocket ss = new ServerSocket(port);
			System.out.println("Waiting for client");
			while (true) {
				Socket s = ss.accept();
				TwitterSetsServer server = new TwitterSetsServer(s, count);
				// launch new thread
				Thread t = new Thread(server);
				t.start();
			}
		} catch (Exception e) {
			// Ignore error
			System.out.println("Error");
		}
	}

	@Override
	public void run() {
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(
					s.getInputStream()));
			PrintWriter pw = new PrintWriter(new OutputStreamWriter(
					s.getOutputStream()));
			String query_str = br.readLine();

			System.out.println("QUERY_str : " + query_str);
			String[] qq = query_str.split("||");
			String query = qq[0];
			String results = "";
			
			
			RunQuery rq = new RunQuery(hostname, port);
			Gson gs = new Gson();
			query = StringUtils.strip(query);

			if (qq.length == 1) {
				System.out.println("QUERY : "+query);
				Set<String> candTerms = new HashSet<String>();
				int tweetnum = 10;
				int tagnum = 25;
				int retnum = 100;
				int M = 30;
				int L = 30;
				double alpha = 0.9;
				double enTh = 0.1;
				TemporalProfile tp = new TemporalProfile(rq, query, retnum);
				System.out.println("TP size : "+tp.size());
				////////////////////////////////////			
				//System.out.println("JS"+gs.toJson(js).toString());
				////////////////////////////////////
				if(tp.size() == 0){
					Map js = new HashMap();
					results = gs.toJson(js).toString();
				}else{
					Map<String, Double> map = tp.TSQE(M, L, alpha, enTh);
					Map<String, Double> tagcloud = rq.tagcloud(tp.topCandTerms(map, tagnum));
					List<Object[]> tweets = tp.topTweets(tweetnum);
					Map js = new HashMap();
					//js.put("tweets", ArrayUtils.subarray(tweets.toArray(), 0, tweetnum));
					js.put("tweets", tweets);
					js.put("tagcloud", tagcloud);
					results = gs.toJson(js).toString();
				}
			}
			/* expanded query processing */
			else if (qq.length == 2) {
				String cw = qq[1];
				String equery = query.replace(")$", cw+")");
				System.out.println("QUERY : "+query);
				System.out.println("EQUERY : "+equery);
				int retnum = 100;
				int tweetnum = 10;
				int L = 30;
				
				Set<String> cand_terms = new HashSet<String>();
				cand_terms.add(cw);
				TemporalProfile tp_q = new TemporalProfile(rq, query, retnum);
				TemporalProfile tp_eq = new TemporalProfile(rq, equery, retnum);
				
				Map<String, Map> tp_map = new HashMap<String, Map>();
				tp_map.put(query,  tp_q.temporalModel(tp_q.queryProfile(), L));
				tp_map.put(equery, tp_q.temporalModel(tp_q.exQueryProfile(cand_terms).get(cw), L));
				List tps = rq.chart(tp_map);

				Map js = new HashMap();
				System.out.println("QP size : "+tp_q.size());
				System.out.println("EQP size : "+tp_eq.size());
				
				js.put("tweets", tp_eq.topTweets(tweetnum));
				js.put("chart", tps);
				results = gs.toJson(js).toString();
				////////////////////////////////////
				//System.out.println(gs.toJson(tps));
				////////////////////////////////////
			} else {
				System.err.println("No query");
			}
			pw.println(results);
			pw.flush();
		} catch (Exception e) {
			// Ignore error
			System.out.println("Thread: Error");
		}
	}
}
