package main;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.servlet.ServletException;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang.ArrayUtils;
import org.apache.commons.lang.StringUtils;

import search.RunQuery;
import search.TemporalProfile;

import com.google.gson.Gson;

/**
 * Servlet implementation class TwitterSets
 */
@WebServlet("/TwitterSetsServlet")
public class TwitterSetsServlet extends HttpServlet {
	private static final long serialVersionUID = 1L;
	private static String url = "";
	public static final String DOCTYPE = "<!DOCTYPE HTML>";
	public static String CSSD = "/css/";
	public static String JSD = "/script/";
	public static String IMGD = "/img/";
	private static String index = "/Users/taiki/data/Tweets2011/data/index/indri/trectext.en.krov";
	//private static String index = "/home/taiki/mnt/rubicon/data/Microblog2011/data/index/indri/trectext.en.krov";
	//private static String index = "/home/taiki/data/Tweets2011/index/indri/trectext.en.krov/";
	String hostname = "rubicon.cs.scitec.kobe-u.ac.jp";
	//int port = 5600;
	int port = 9998;
	Socket s;
	
	/**
	 * @see HttpServlet#HttpServlet()
	 */
	public TwitterSetsServlet() {	
		super();
		//-Djava.library.path=/usr/local/lib
		//System.setProperty("java.library.path", "/usr/local/lib");
		//System.setProperty("java.library.path", "/home/taiki/app/lib");
		//System.setProperty("java.library.path", "/home/taiki/data/src/indri-5.3/swig/obj/java");
		//System.out.println("index = " + index);
		//System.out.println("java.library.path = " + System.getProperty("java.library.path"));
	}

	/**
	 * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doGet(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		response.sendRedirect("/TwitterSets/index.html");
		//response.sendRedirect("http://www.ai.cs.kobe-u.ac.jp/~taiki/twisets/index.html");
	}

	/**
	 * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse
	 *      response)
	 */
	protected void doPost(HttpServletRequest request,
			HttpServletResponse response) throws ServletException, IOException {
		//RunQuery rq = new RunQuery(index);
		RunQuery rq = new RunQuery(hostname, port);
		Gson gs = new Gson();
		
		String field = null;
		String results = "";
		
		PrintWriter out = response.getWriter();
		List<String> qs = new ArrayList<String>();
		qs.add(request.getParameter("q1"));
		qs.add(request.getParameter("q2"));
		qs.add(request.getParameter("q3"));
		qs.add(request.getParameter("q4"));
		qs.add(request.getParameter("q5"));
		String query = rq.qs2query(qs, field);
		String cw = request.getParameter("cw");

		
				
		/* original query processing */
		if (rq.queryCheck(qs) && cw == null) {
			InetAddress addr = InetAddress.getByName(null);
			s = new Socket(addr, port);
			OutputStreamWriter osw = new OutputStreamWriter(s.getOutputStream());
			PrintWriter pw = new PrintWriter(osw);
			BufferedReader br1 = new BufferedReader(new InputStreamReader(s.getInputStream()));
			String query_str = rq.qs2query(qs, field);
			pw.println(query_str);
			pw.flush();
			results = br1.readLine();
		}
		/* expanded query processing */
		else if (rq.queryCheck(qs)  && cw != null) {
			String equery = query +"##"+cw; 
			int retnum = 100;
			int tweetnum = 10;
			int L = 30;
			
			Set<String> cand_terms = new HashSet<String>();
			cand_terms.add(cw);
			TemporalProfile tp_q = new TemporalProfile(rq, query, retnum);
			TemporalProfile tp_eq = new TemporalProfile(rq, equery, retnum);
			
			Map<String, Map> tp_map = new HashMap<String, Map>();
			tp_map.put(query,  tp_q.temporalModel(tp_q.queryProfile(), L));
			// build temporal model using AND+
			tp_map.put(equery, tp_q.temporalModel(tp_q.exQueryProfile(cand_terms).get(cw), L));
			List tps = rq.chart(tp_map);

			Map js = new HashMap();
			System.out.println("QP size : "+tp_q.size());
			System.out.println("EQP size : "+tp_eq.size());
			
			js.put("tweets", tp_eq.topTweets(tweetnum));
			js.put("chart", tps);
			out.println(gs.toJson(js).toString());
			////////////////////////////////////
			//System.out.println(gs.toJson(tps));
			////////////////////////////////////
		} else {
			System.err.println("No query");
		}
		out.close();
	}
}
